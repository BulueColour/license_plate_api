from PIL import Image
if not hasattr(Image, "ANTIALIAS"):
    Image.ANTIALIAS = Image.Resampling.LANCZOS

import easyocr
import re
import cv2
import numpy as np
import logging
import difflib

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

class OCRService:
    COMMON_CORRECTIONS = {
        "‡∏Ç‡∏ô‡∏ö": "‡∏Ç‡∏ô‡∏©",
        "‡∏£‡∏Ç‡∏≠‡∏á": "‡∏£‡∏∞‡∏ô‡∏≠‡∏á",
        "‡∏£‡∏¢‡∏≠‡∏á": "‡∏£‡∏∞‡∏¢‡∏≠‡∏á",
        "‡∏ö‡∏Å": "‡∏ö‡∏Ç",
        "6‡∏≠‡∏ö": "660",
        "6‡∏ö": "660",
        "66‡∏ö": "660",
        "77‡∏≠": "772",
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£
        "‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏á‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏á‡∏ó‡∏û‡∏°‡∏ó‡∏ß‡∏ô": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏á‡∏ó‡∏û‡∏°‡∏´‡∏ß‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏®‡∏°‡∏ó‡∏ß‡∏ö‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏Å‡∏£‡∏á‡∏ó‡∏û‡∏°‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏ó‡∏û‡∏¢‡∏û‡∏ó‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏û‡∏°‡∏´1‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏û‡∏°‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏û‡∏°‡∏´‡∏ß‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏ó‡∏°‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û - ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å ‡∏Å‡∏Å‡∏ç‡∏à‡∏ô‡∏ö‡∏£ -> ‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û)
        "‡∏Å‡∏Å‡∏ç‡∏à‡∏ô‡∏ö‡∏£": "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ",
        "‡∏Å‡∏ß‡∏ç‡∏à‡∏ô‡∏ö‡∏£": "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", 
        "‡∏Å‡∏ç‡∏à‡∏ô‡∏ö‡∏£": "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ",
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤
        "‡∏â‡∏£‡∏ä‡∏á‡∏ó‡∏ó‡∏£‡∏Å": "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤",
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏£ - ‡∏ò
        "‡∏£‡∏∞‡∏¢‡∏≠‡∏á": "‡∏£‡∏∞‡∏ô‡∏≠‡∏á",
        "‡∏£‡∏Ç‡∏≠‡∏á": "‡∏£‡∏∞‡∏¢‡∏≠‡∏á",
        "‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏á‡∏£": "‡∏ò‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ",
        "‡∏ò‡∏∞‡∏ô‡∏≠‡∏á": "‡∏£‡∏∞‡∏ô‡∏≠‡∏á",  
        "‡∏ò‡∏∞‡∏¢‡∏≠‡∏á": "‡∏£‡∏∞‡∏¢‡∏≠‡∏á",
        "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏ò‡∏µ": "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ",
        "‡∏ò‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ": "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ",
        "‡∏ò‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î": "‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î",
        "‡∏£‡∏±‡∏á‡∏Ñ‡∏ß‡∏¢": "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ",
        "‡∏ô‡∏Ñ‡∏£‡∏ò‡∏£‡∏£‡∏°‡∏ò‡∏≤‡∏ä": "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä",
        "‡∏™‡∏£‡∏£‡∏ö‡∏£": "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ",
        "‡∏™‡∏£8‡∏ö‡∏£": "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ",
        "‡∏™‡∏∏‡∏ò‡∏¥‡∏ò‡∏ò‡∏≤‡∏ô‡∏µ": "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
        "‡∏™‡∏∏‡∏£‡∏≤‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ": "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
        "‡∏™‡∏∏‡∏£‡∏≤‡∏™‡∏ò‡∏£‡∏ò‡∏≤‡∏ô‡∏µ": "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
        "‡∏â‡∏ä‡∏á‡∏ó‡∏ó‡∏£‡∏ß": "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤",
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ
        "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏†‡∏ô‡∏µ": "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ",
        "‡∏≠‡∏∏‡∏î‡∏ò‡∏ò‡∏≤‡∏ô‡∏µ": "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ",
        "‡∏≠‡∏∏‡∏î‡∏£‡∏£‡∏≤‡∏ì‡∏µ": "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ",
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î - ‡πÅ‡∏Å‡πâ ‡∏Å‡∏Ç ‡πÄ‡∏õ‡πá‡∏ô ‡∏Å‡∏ä
        "‡∏Å‡∏Ç": "‡∏Å‡∏ä",
        "1‡∏Å‡∏Ç": "1‡∏Å‡∏ä",
        "2‡∏Å‡∏Ç": "2‡∏Å‡∏ä",
        "3‡∏Å‡∏Ç": "3‡∏Å‡∏ä",
        "4‡∏Å‡∏Ç": "4‡∏Å‡∏ä",
        "5‡∏Å‡∏Ç": "5‡∏Å‡∏ä",
        "6‡∏Å‡∏Ç": "6‡∏Å‡∏Ç",  # 6‡∏Å‡∏Ç ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ
        "7‡∏Å‡∏Ç": "7‡∏Å‡∏ä",
        "8‡∏Å‡∏Ç": "8‡∏Å‡∏ä",
        "9‡∏Å‡∏Ç": "9‡∏Å‡∏ä",
        "0‡∏Å‡∏Ç": "0‡∏Å‡∏ä",
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î
        "‡∏ö": "‡∏©",
        "‡∏Å‡∏Ñ": "‡∏Å‡∏Ç",
        "‡∏Å‡∏ã": "‡∏Å‡∏ä",
        "‡∏Å‡∏ë": "‡∏Å‡∏î",
        "‡∏Å‡∏í": "‡∏Å‡∏ó",
        "‡∏Å‡∏ü": "‡∏Å‡∏ú",
        "1‡∏Å‡∏Ñ": "1‡∏Å‡∏Ç",
        "1‡∏Å‡∏ã": "1‡∏Å‡∏ä",
        "1‡∏Å‡∏ë": "1‡∏Å‡∏î",
        "1‡∏Å‡∏í": "1‡∏Å‡∏ó",
        "1‡∏Å‡∏ü": "1‡∏Å‡∏ú",
    }

    def __init__(self, debug=False):
        self.debug = debug
        try:
            self.reader = easyocr.Reader(['th', 'en'], gpu=False, verbose=False)
            logger.info("‚úÖ EasyOCR initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize EasyOCR: {e}")
            self.reader = None

        self.provinces = {
            '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø', '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£',
            '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó', '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏ä‡∏∏‡∏°‡∏û‡∏£',
            '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡∏£‡∏±‡∏á', '‡∏ï‡∏£‡∏≤‡∏î', '‡∏ï‡∏≤‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°',
            '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™', '‡∏ô‡πà‡∏≤‡∏ô',
            '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå', '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ',
            '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', '‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á', '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£', '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ',
            '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå', '‡πÅ‡∏û‡∏£‡πà', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô', '‡∏¢‡πÇ‡∏™‡∏ò‡∏£',
            '‡∏¢‡∏∞‡∏•‡∏≤', '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î', '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô',
            '‡πÄ‡∏•‡∏¢', '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©', '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏™‡∏ï‡∏π‡∏•', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°',
            '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ',
            '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢', '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π', '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå',
            '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ'
        }

    def partial_match_province(self, text, min_length=3):
        """
        ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ partial string matching
        """
        if len(text) < min_length:
            return None
            
        best_match = None
        best_score = 0
        
        for province in self.provinces:
            max_common_len = 0
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô substring ‡∏Ç‡∏≠‡∏á province
            if text in province:
                score = len(text) / len(province)
                if province.startswith(text):
                    score += 0.4
                elif province.endswith(text):
                    score += 0.3
                else:
                    score += 0.2
                    
                if score > best_score:
                    best_score = score
                    best_match = province
                    max_common_len = len(text)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö province ‡πÄ‡∏õ‡πá‡∏ô substring ‡∏Ç‡∏≠‡∏á text
            elif province in text and len(province) >= min_length:
                score = len(province) / len(text) + 0.1
                if score > best_score:
                    best_score = score
                    best_match = province
                    max_common_len = len(province)
            
            else:
                for i in range(len(text) - min_length + 1):
                    for j in range(i + min_length, len(text) + 1):
                        substring = text[i:j]
                        if substring in province and len(substring) > max_common_len:
                            max_common_len = len(substring)
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                            score = (len(substring) / len(province)) * 0.8
                            # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
                            if province.startswith(substring):
                                score += 0.4
                            elif province.endswith(substring):
                                score += 0.3
                            else:
                                score += 0.2
                            
                            if score > best_score:
                                best_score = score
                                best_match = province
        
        # ‡∏•‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0.25 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        logger.info(f"üîç Partial matching '{text}': best_match='{best_match}', score={best_score:.3f}")
        return best_match if best_match and best_score >= 0.25 else None

    def fuzzy_match_province(self, text):
        """
        ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ fuzzy matching (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î)
        """
        match = difflib.get_close_matches(text, self.provinces, n=1, cutoff=0.6)
        return match[0] if match else None

    def match_province(self, text):
        """
        ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á partial ‡πÅ‡∏•‡∏∞ fuzzy matching
        """
        if not text or len(text) < 2:
            return None
            
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ exact match ‡∏Å‡πà‡∏≠‡∏ô
        if text in self.provinces:
            return text
            
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ partial match
        partial_result = self.partial_match_province(text)
        if partial_result:
            logger.info(f"üéØ Partial match found: '{text}' -> '{partial_result}'")
            return partial_result
            
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡πÉ‡∏ä‡πâ fuzzy match
        fuzzy_result = self.fuzzy_match_province(text)
        if fuzzy_result:
            logger.info(f"üîç Fuzzy match found: '{text}' -> '{fuzzy_result}'")
            return fuzzy_result
            
        return None

    def smart_correct_license_chars(self, text):
        """
        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
        """
        if not text:
            return text
            
        # ‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        char_corrections = {
            '‡∏Ç': '‡∏ä',  # ‡∏Ç ‡∏°‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô ‡∏ä ‡πÉ‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
            '‡∏Ñ': '‡∏Ç',  # ‡∏Ñ ‡∏°‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô ‡∏Ç
            '‡∏ã': '‡∏ä',  # ‡∏ã ‡∏°‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô ‡∏ä
            '‡∏ë': '‡∏î',  # ‡∏ë ‡∏°‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô ‡∏î
            '‡∏í': '‡∏ó',  # ‡∏í ‡∏°‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô ‡∏ó
            '‡∏ü': '‡∏ú',  # ‡∏ü ‡∏°‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏õ‡πá ‡∏ú
        }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
        has_digit = any(c.isdigit() for c in text)
        
        # ‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á - ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        real_license_chars = ['‡∏Å‡∏Å', '‡∏Å‡∏Ç', '‡∏Å‡∏Ñ', '‡∏Å‡∏á', '‡∏Å‡∏à', '‡∏Å‡∏â', '‡∏Å‡∏ä', '‡∏Å‡∏ã', '‡∏Å‡∏å', '‡∏Å‡∏ç', 
                             '‡∏Å‡∏é', '‡∏Å‡∏è', '‡∏Å‡∏ê', '‡∏Å‡∏ë', '‡∏Å‡∏í', '‡∏Å‡∏ì', '‡∏Å‡∏î', '‡∏Å‡∏ï', '‡∏Å‡∏ñ', '‡∏Å‡∏ó', 
                             '‡∏Å‡∏ò', '‡∏Å‡∏ô', '‡∏Å‡∏ö', '‡∏Å‡∏õ', '‡∏Å‡∏ú', '‡∏Å‡∏ù', '‡∏Å‡∏û', '‡∏Å‡∏ü', '‡∏Å‡∏†', '‡∏Å‡∏°', 
                             '‡∏Å‡∏¢', '‡∏Å‡∏£', '‡∏Å‡∏•', '‡∏Å‡∏ß', '‡∏Å‡∏®', '‡∏Å‡∏©', '‡∏Å‡∏™', '‡∏Å‡∏´', '‡∏Å‡∏¨', '‡∏Å‡∏≠', '‡∏Å‡∏Æ']
        
        corrected = ""
        original_changed = False
        
        for i, char in enumerate(text):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏õ‡πâ‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á
            if (has_digit and char in char_corrections):
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏Å‡∏©‡∏£ 2 ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏õ‡πâ‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if i < len(text) - 1:
                    two_chars = text[i:i+2]
                    if two_chars not in real_license_chars and char == '‡∏Ç':
                        corrected += char_corrections[char]
                        original_changed = True
                        logger.info(f"üîß Smart character correction: '{char}' -> '{char_corrections[char]}' in context '{text}'")
                    else:
                        corrected += char
                else:
                    if char == '‡∏Ç':  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏Ç -> ‡∏ä ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
                        corrected += char_corrections[char]
                        original_changed = True
                        logger.info(f"üîß Smart character correction: '{char}' -> '{char_corrections[char]}' in context '{text}'")
                    else:
                        corrected += char
            else:
                corrected += char
        
        if original_changed:
            logger.info(f"üîÑ Smart correction result: '{text}' -> '{corrected}'")
                
        return corrected

    def preprocess_image(self, img_array):
        try:
            if len(img_array.shape) == 3:
                gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
            else:
                gray = img_array

            # ‚úÖ Resize ‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏≠
            height, width = gray.shape
            if width < 400 or height < 150:
                scale = max(400 / width, 150 / height)
                gray = cv2.resize(gray, (int(width * scale), int(height * scale)), interpolation=cv2.INTER_CUBIC)

            # ‚úÖ CLAHE (‡∏õ‡∏£‡∏±‡∏ö contrast ‡πÅ‡∏ö‡∏ö local)
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
            enhanced = clahe.apply(gray)

            # ‚úÖ Blur ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß sharpen
            blurred = cv2.GaussianBlur(enhanced, (3, 3), 0)
            sharpened = cv2.addWeighted(enhanced, 1.5, blurred, -0.5, 0)

            # ‚úÖ Threshold ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
            otsu = cv2.threshold(sharpened, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
            adaptive = cv2.adaptiveThreshold(
                sharpened, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                cv2.THRESH_BINARY, 11, 2
            )

            # ‚úÖ Morphological cleaning
            kernel = np.ones((2, 2), np.uint8)
            morph_open = cv2.morphologyEx(otsu, cv2.MORPH_OPEN, kernel)
            morph_close = cv2.morphologyEx(otsu, cv2.MORPH_CLOSE, kernel)

            return [sharpened, otsu, adaptive, morph_open, morph_close]

        except Exception as e:
            logger.error(f"Preprocessing failed: {e}")
            return [img_array]

    def clean_text(self, text):
        if not text:
            return ""
        text = text.strip()
        
        # ‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ smart correction ‡∏Å‡πà‡∏≠‡∏ô (‡∏î‡∏π‡∏ö‡∏£‡∏¥‡∏ö‡∏ó)
        text = self.smart_correct_license_chars(text)
        
        # ‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ COMMON_CORRECTIONS (dictionary lookup)
        if text in self.COMMON_CORRECTIONS:
            original_text = text
            text = self.COMMON_CORRECTIONS[text]
            logger.info(f"üîß Dictionary correction: '{original_text}' -> '{text}'")
        
        # ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÑ‡∏ó‡∏¢/‡πÄ‡∏•‡∏Ç ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏Ñ‡∏£‡∏ö
        text = re.sub(r'[^\u0E00-\u0E7F0-9]', '', text)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏¢‡∏≤‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£
        return text[:20]  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 15 ‡πÄ‡∏õ‡πá‡∏ô 20

    def is_license_plate_fragment(self, text):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ text ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        if len(text) < 1:
            return False
            
        # Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fragment ‡∏Ç‡∏≠‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        fragment_patterns = [
            r'^\d+[‡∏Å-‡∏Æ]+$',        # ‡πÄ‡∏ä‡πà‡∏ô "1‡∏Å‡∏ä" 
            r'^[‡∏Å-‡∏Æ]+\d*$',        # ‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡∏ä" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Å‡∏ä123"
            r'^\d+$',              # ‡πÄ‡∏ä‡πà‡∏ô "4559"
            r'^[‡∏Å-‡∏Æ]+$',           # ‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡∏ä"
        ]
        
        return any(re.match(p, text) for p in fragment_patterns)

    def is_valid_license_plate(self, text):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ text ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        if len(text) < 3:
            return False
            
        patterns = [
            r'^[‡∏Å-‡∏Æ]{1,3}\d{1,4}$',        # ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏ä4559
            r'^\d{1,2}[‡∏Å-‡∏Æ]{1,3}\d{1,4}$', # ‡πÄ‡∏ä‡πà‡∏ô 1‡∏Å‡∏ä4559
            r'^[‡∏Å-‡∏Æ]{1,2}\d{1,4}[‡∏Å-‡∏Æ]{0,2}$', # ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏ä4559‡∏Å
        ]
        return any(re.match(p, text) for p in patterns)

    def combine_license_plate_fragments(self, fragments):
        """
        ‡∏£‡∏ß‡∏° fragments ‡∏Ç‡∏≠‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏ï‡πá‡∏°
        """
        if not fragments:
            return []
            
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á fragments ‡∏ï‡∏≤‡∏° confidence
        fragments.sort(key=lambda x: x[1], reverse=True)
        
        combined_plates = []
        used_fragments = set()
        
        logger.info(f"üîß Combining fragments: {[(f[0], f[1]) for f in fragments]}")
        
        for i, (text1, conf1, bbox1) in enumerate(fragments):
            if i in used_fragments:
                continue
                
            # ‡∏•‡∏≠‡∏á‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö fragments ‡∏≠‡∏∑‡πà‡∏ô
            for j, (text2, conf2, bbox2) in enumerate(fragments):
                if i == j or j in used_fragments:
                    continue
                    
                # ‡∏•‡∏≠‡∏á‡∏£‡∏ß‡∏°‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
                combinations = [
                    text1 + text2,  # ‡∏£‡∏ß‡∏°‡∏ï‡∏£‡∏á‡πÜ
                    text2 + text1,  # ‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô
                ]
                
                for combined in combinations:
                    if self.is_valid_license_plate(combined):
                        avg_conf = (conf1 + conf2) / 2
                        combined_plates.append((combined, avg_conf))
                        used_fragments.add(i)
                        used_fragments.add(j)
                        logger.info(f"‚úÖ Combined '{text1}' + '{text2}' = '{combined}' (conf={avg_conf:.3f})")
                        break
                        
                if i in used_fragments:
                    break
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° fragments ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        for i, (text, conf, bbox) in enumerate(fragments):
            if i not in used_fragments and self.is_valid_license_plate(text):
                combined_plates.append((text, conf))
                logger.info(f"‚úÖ Complete plate found: '{text}' (conf={conf:.3f})")
        
        return combined_plates

    def extract_text(self, image):
        if self.reader is None:
            logger.warning("EasyOCR not available")
            return ""

        img_array = np.array(image) if isinstance(image, Image.Image) else image
        processed_images = self.preprocess_image(img_array)

        plate_fragments = []  # ‡πÄ‡∏Å‡πá‡∏ö fragments ‡∏Ç‡∏≠‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        province_candidates = []

        for idx, img in enumerate(processed_images):
            results = self.reader.readtext(
                img,
                width_ths=0.05, height_ths=0.05, paragraph=False, detail=1,
                allowlist='0123456789‡∏Å‡∏Ç‡∏É‡∏Ñ‡∏á‡∏à‡∏â‡∏ä‡∏ã‡∏å‡∏ç‡∏é‡∏è‡∏ê‡∏ë‡∏í‡∏ì‡∏î‡∏ï‡∏ñ‡∏ó‡∏ò‡∏ô‡∏ö‡∏õ‡∏ú‡∏ù‡∏û‡∏ü‡∏†‡∏°‡∏¢‡∏£‡∏•‡∏ß‡∏®‡∏©‡∏™‡∏´‡∏¨‡∏≠‡∏Æ'
            )
            logger.info(f"üîπ Processed image {idx+1}: found {len(results)} OCR lines")

            for bbox, text, conf in results:
                cleaned = self.clean_text(text)
                if not cleaned:
                    continue

                logger.info(f"üìù Cleaned text: '{text}' -> '{cleaned}' (conf={conf:.3f})")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
                matched_province = self.match_province(cleaned)
                if matched_province:
                    province_candidates.append((matched_province, conf, cleaned))
                    continue

                # ‡πÄ‡∏Å‡πá‡∏ö fragments ‡∏Ç‡∏≠‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
                if self.is_license_plate_fragment(cleaned):
                    plate_fragments.append((cleaned, conf, bbox))
                    logger.info(f"üß© Plate fragment: '{cleaned}' (conf={conf:.3f})")

        # ‚úÖ ‡∏£‡∏ß‡∏° fragments ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏ï‡πá‡∏°
        combined_plates = self.combine_license_plate_fragments(plate_fragments)
        
        # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        best_plate = ""
        if combined_plates:
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° confidence ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡∏õ‡πâ‡∏≤‡∏¢‡∏¢‡∏≤‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤)
            combined_plates.sort(key=lambda x: (x[1], len(x[0])), reverse=True)
            best_plate = combined_plates[0][0]
            logger.info(f"üèÜ Selected plate: '{best_plate}' (conf={combined_plates[0][1]:.3f})")
        elif plate_fragments:
            # ‡∏ñ‡πâ‡∏≤‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤ fragment ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            plate_fragments.sort(key=lambda x: (x[1], len(x[0])), reverse=True)
            best_plate = plate_fragments[0][0]
            logger.info(f"üèÜ Selected plate fragment: '{best_plate}' (conf={plate_fragments[0][1]:.3f})")

        # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        best_province = ""
        if province_candidates:
            province_candidates.sort(key=lambda x: x[1], reverse=True)
            best_province = province_candidates[0][0]
            logger.info(f"üèÜ Selected province: '{best_province}' (from '{province_candidates[0][2]}', conf: {province_candidates[0][1]:.3f})")

        # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        combined_text = best_plate
        if best_province:
            combined_text += f" {best_province}"

        logger.info(f"‚úÖ Final combined text: '{combined_text}'")
        return combined_text