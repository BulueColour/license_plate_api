from PIL import Image
if not hasattr(Image, "ANTIALIAS"):
    Image.ANTIALIAS = Image.Resampling.LANCZOS

import easyocr
import re
import cv2
import numpy as np
import logging
import difflib

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

class OCRService:
    COMMON_CORRECTIONS = {
        "‡∏Ç‡∏ô‡∏ö": "‡∏Ç‡∏ô‡∏©",
        "‡∏£‡∏Ç‡∏≠‡∏á": "‡∏£‡∏∞‡∏ô‡∏≠‡∏á",
        "‡∏£‡∏¢‡∏≠‡∏á": "‡∏£‡∏∞‡∏¢‡∏≠‡∏á",
        "‡∏ö‡∏Å": "‡∏ö‡∏Ç",
        "6‡∏≠‡∏ö": "660",
        "6‡∏ö": "660",
        "66‡∏ö": "660",
        "77‡∏≠": "772",
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£
        "‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏á‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏á‡∏ó‡∏û‡∏°‡∏ó‡∏ß‡∏ô": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø",
        "‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏ó‡∏û‡∏¢‡∏û‡∏ó‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏û‡∏°‡∏´1‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏û‡∏°‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        "‡∏Å‡∏£‡∏á‡∏ó‡∏û‡∏°‡∏´‡∏ß‡∏ô‡∏Ñ‡∏£": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤
        "‡∏â‡∏£‡∏ä‡∏á‡∏ó‡∏ó‡∏£‡∏Å": "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤",
    }

    def __init__(self, debug=False):
        self.debug = debug
        try:
            self.reader = easyocr.Reader(['th', 'en'], gpu=False, verbose=False)
            logger.info("‚úÖ EasyOCR initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize EasyOCR: {e}")
            self.reader = None

        self.provinces = {
            '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø', '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£',
            '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó', '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏ä‡∏∏‡∏°‡∏û‡∏£',
            '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡∏£‡∏±‡∏á', '‡∏ï‡∏£‡∏≤‡∏î', '‡∏ï‡∏≤‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°',
            '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™', '‡∏ô‡πà‡∏≤‡∏ô',
            '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå', '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ',
            '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', '‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á', '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£', '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ',
            '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå', '‡πÅ‡∏û‡∏£‡πà', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô', '‡∏¢‡πÇ‡∏™‡∏ò‡∏£',
            '‡∏¢‡∏∞‡∏•‡∏≤', '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î', '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô',
            '‡πÄ‡∏•‡∏¢', '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©', '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏™‡∏ï‡∏π‡∏•', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°',
            '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ',
            '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢', '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π', '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå',
            '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ'
        }

    def partial_match_province(self, text, min_length=3):
        """
        ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ partial string matching
        ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡πÑ‡∏õ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
        """
        if len(text) < min_length:
            return None
            
        best_match = None
        best_score = 0
        
        for province in self.provinces:
            max_common_len = 0
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô substring ‡∏Ç‡∏≠‡∏á province
            if text in province:
                score = len(text) / len(province)
                if province.startswith(text):
                    score += 0.4
                elif province.endswith(text):
                    score += 0.3
                else:
                    score += 0.2
                    
                if score > best_score:
                    best_score = score
                    best_match = province
                    max_common_len = len(text)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö province ‡πÄ‡∏õ‡πá‡∏ô substring ‡∏Ç‡∏≠‡∏á text
            elif province in text and len(province) >= min_length:
                score = len(province) / len(text) + 0.1
                if score > best_score:
                    best_score = score
                    best_match = province
                    max_common_len = len(province)
            
            else:
                for i in range(len(text) - min_length + 1):
                    for j in range(i + min_length, len(text) + 1):
                        substring = text[i:j]
                        if substring in province and len(substring) > max_common_len:
                            max_common_len = len(substring)
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                            score = (len(substring) / len(province)) * 0.8
                            # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
                            if province.startswith(substring):
                                score += 0.4
                            elif province.endswith(substring):
                                score += 0.3
                            else:
                                score += 0.2
                            
                            if score > best_score:
                                best_score = score
                                best_match = province
        
        # ‡∏•‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0.25 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        logger.info(f"üîç Partial matching '{text}': best_match='{best_match}', score={best_score:.3f}")
        return best_match if best_match and best_score >= 0.25 else None

    def fuzzy_match_province(self, text):
        """
        ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ fuzzy matching (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î)
        """
        match = difflib.get_close_matches(text, self.provinces, n=1, cutoff=0.6)
        return match[0] if match else None

    def match_province(self, text):
        """
        ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á partial ‡πÅ‡∏•‡∏∞ fuzzy matching
        """
        if not text or len(text) < 2:
            return None
            
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ exact match ‡∏Å‡πà‡∏≠‡∏ô
        if text in self.provinces:
            return text
            
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ partial match
        partial_result = self.partial_match_province(text)
        if partial_result:
            logger.info(f"üéØ Partial match found: '{text}' -> '{partial_result}'")
            return partial_result
            
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡πÉ‡∏ä‡πâ fuzzy match
        fuzzy_result = self.fuzzy_match_province(text)
        if fuzzy_result:
            logger.info(f"üîç Fuzzy match found: '{text}' -> '{fuzzy_result}'")
            return fuzzy_result
            
        return None

    def preprocess_image(self, img_array):
        try:
            if len(img_array.shape) == 3:
                gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
            else:
                gray = img_array

            height, width = gray.shape
            if width < 400 or height < 150:
                scale = max(400 / width, 150 / height)
                gray = cv2.resize(gray, (int(width * scale), int(height * scale)), interpolation=cv2.INTER_CUBIC)

            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
            enhanced = clahe.apply(gray)
            blurred = cv2.GaussianBlur(enhanced, (5,5), 1.0)
            sharpened = cv2.addWeighted(enhanced, 1.5, blurred, -0.5, 0)

            return [
                sharpened,
                cv2.threshold(sharpened, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1],
                cv2.adaptiveThreshold(sharpened, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                       cv2.THRESH_BINARY, 11, 2)
            ]
        except Exception as e:
            logger.error(f"Preprocessing failed: {e}")
            return [img_array]

    def clean_text(self, text):
        if not text:
            return ""
        text = text.strip()
        if text in self.COMMON_CORRECTIONS:
            text = self.COMMON_CORRECTIONS[text]
        # ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÑ‡∏ó‡∏¢/‡πÄ‡∏•‡∏Ç ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏Ñ‡∏£‡∏ö
        text = re.sub(r'[^\u0E00-\u0E7F0-9]', '', text)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏¢‡∏≤‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£
        return text[:20]  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 15 ‡πÄ‡∏õ‡πá‡∏ô 20

    def is_valid_license_plate(self, text):
        patterns = [
            r'^[‡∏Å-‡∏Æ]{1,3}\d{1,4}$',
            r'^\d{1,2}[‡∏Å-‡∏Æ]{1,3}\d{1,4}$',
            r'^[‡∏Å-‡∏Æ]{1,2}\d{1,4}[‡∏Å-‡∏Æ]{0,2}$',
        ]
        return any(re.match(p, text) for p in patterns)

    def extract_text(self, image):
        if self.reader is None:
            logger.warning("EasyOCR not available")
            return ""
        img_array = np.array(image) if isinstance(image, Image.Image) else image
        processed_images = self.preprocess_image(img_array)
        letters_list = []
        digits_list = []
        province_candidates = []
        for idx, img in enumerate(processed_images):
            results = self.reader.readtext(
                img,
                width_ths=0.05, height_ths=0.05, paragraph=False, detail=1,
                allowlist='0123456789‡∏Å‡∏Ç‡∏É‡∏Ñ‡∏á‡∏à‡∏â‡∏ä‡∏ã‡∏å‡∏ç‡∏é‡∏è‡∏ê‡∏ë‡∏í‡∏ì‡∏î‡∏ï‡∏ñ‡∏ó‡∏ò‡∏ô‡∏ö‡∏õ‡∏ú‡∏ù‡∏û‡∏ü‡∏†‡∏°‡∏¢‡∏£‡∏•‡∏ß‡∏®‡∏©‡∏™‡∏´‡∏¨‡∏≠‡∏Æ'
            )
            logger.info(f"üîπ Processed image {idx+1}: found {len(results)} OCR lines")
            for bbox, text, conf in results:
                cleaned = self.clean_text(text)
                matched_province = self.match_province(cleaned)
                logger.info(f"üìù OCR line: '{cleaned}' | confidence: {conf:.3f} | matched_province: {matched_province}")
                if matched_province:
                    province_candidates.append((matched_province, conf, cleaned))
                elif re.search(r'[‡∏Å-‡∏Æ]', cleaned) and not re.search(r'\d', cleaned):
                    letters_list.append((cleaned, conf))
                elif re.search(r'\d', cleaned) and not re.search(r'[‡∏Å-‡∏Æ]', cleaned):
                    digits_list.append((cleaned, conf))
                else:
                    letters_part = ''.join(re.findall(r'[‡∏Å-‡∏Æ]', cleaned))
                    digits_part = ''.join(re.findall(r'\d', cleaned))
                    if letters_part:
                        letters_list.append((letters_part, conf))
                    if digits_part:
                        digits_list.append((digits_part, conf))

        valid_digits_list = [
            (d, conf) for d, conf in digits_list
            if (d.isdigit() and 1 <= len(d) <= 4) or self.is_valid_license_plate(d)
        ]
        best_digits = max(valid_digits_list, key=lambda x: x[1])[0] if valid_digits_list else ""

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢ 2‚Äì3 ‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≠‡∏¢ fallback
        valid_letters_list = [
            (l, conf) for l, conf in letters_list
            if re.fullmatch(r'[‡∏Å-‡∏Æ]{2,3}', l)
        ]
        if valid_letters_list:
            best_letters = max(valid_letters_list, key=lambda x: x[1])[0]
        else:
            best_letters = max(letters_list, key=lambda x: x[1])[0] if letters_list else ""

        best_province = ""
        if province_candidates:
            province_candidates.sort(key=lambda x: x[1], reverse=True)
            best_province = province_candidates[0][0]
            logger.info(f"üèÜ Selected province: '{best_province}' (from '{province_candidates[0][2]}', conf: {province_candidates[0][1]:.3f})")

        combined_text = f"{best_letters}{best_digits}"
        if best_province:
            combined_text += f" {best_province}"
        logger.info(f"‚úÖ Selected combined text: '{combined_text}'")
        return combined_text